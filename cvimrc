" Consider trying fork at https://github.com/hbt/mouseless

" Preamble {{{

" To load this local cvimrc:
" i) Go to :settings and put only set localconfig in the cvimrc textarea
" ii) In the browser run `:source /path/to/your/.cvimrc`
" iii) Check `Allow access to file URLS` for cvim in the extension view
let configpath = '/Users/pedro/.cvimrc'
set localconfig

" Set local leader to comma
let mapleader = ','

" }}}
" Appearance and options {{{

" colorscheme molokai

" set visualbell
" Toggle navigation bar
" set guioptions=Csn
" nmap -builtin <Leader>nb  :set guioptions!=T<CR>

" Place the command bar in the bottom with max height of 15
let barposition = 'bottom'
let searchlimit = 15
" Only complete from google and wikipedia
let completionengines = ['google', 'wikipedia']

" Scroll smoothly
set smoothscroll

" Stops sites from focusing on an input box when they load
set noautofocus

" The following should autoselect first candidate?
" FIXME: https://github.com/1995eaton/chromium-vim/issues/335
set completeonopen

" }}}
" Bookmarks/Quickmarks {{{

map <Leader>bm :bookmarks<Space>
map <Leader>ab createBookmark

" Use ' to jump to quickmarks in current tab and " in new tab
map '* openQuickMark
map "* openQuickMarkTabbed

" " Define qmarks
let qmark b = 'www.bitbucket.com'
let qmark c = 'www.utdt.edu/campusvirtual'
let qmark d = 'http://distancia.econ.uba.ar/'
let qmark d = 'https://drive.google.com/drive/my-drive'
let qmark e = 'https://extratorrent.unblockall.xyz/hot_torrents/2/XVID+DIVX.html'
let qmark f = 'www.facebook.com'
let qmark g = 'www.github.com'
let qmark h = 'www.google.com.ar'
let qmark i = 'www.infobae.com.ar'
let qmark l = 'www.lanacion.com.ar'
let qmark m = 'www.mercadolibre.com.ar'
let qmark n = 'www.netflix.com'
let qmark p = 'http://pirateproxy.net'
let qmark s = 'http://stackoverflow.com'
let qmark t = 'tex.stackexchange.com'
let qmark u = 'www.alumnos.econ.uba.ar'
let qmark v = 'http://virtual.econ.uba.ar/'
let qmark y = 'www.yahoo.com/mail'

" For jampp
let qmark j = 'http://app.jampp.com/'
let qmark q = 'http://emr-prd-queries.jampp.com:8889/'

" }}}
" Navigation and tab handling {{{

" Show tab numbers
set showtabindices
" Open new tabs next to the currently opened tab
set nonativelinkorder

" Keys used for hints (front row)
let hintcharacters = 'asdfghjkl'

" Faster navigation
" FIXME: https://github.com/1995eaton/chromium-vim/issues/464
" map j :execute 3j<CR>
" map k :execute 3k<CR>

" Scroll half page
map <C-d> scrollPageDown
map <C-u> scrollPageUp

" New tab
map <Leader>nt :tabopen<CR>
map <C-t> :tabopen<CR>

" Delete/ close tabs
map <Leader>wd closeTab
map <Leader>bd closeTab
map <C-c> closeTab

" Undo last tab
map u lastClosedTab

" Switch tabs as buffers in vim (with C-n and C-p)
map <C-n> nextTab
map <C-p> previousTab

" FIXME: https://github.com/1995eaton/chromium-vim/issues/458
" Move the current tab (we do it with shift instead of alt for now)
map <C-S-h> moveTabLeft
map <C-S-l> moveTabRight

" Go to tab number
switchTab(n) -> {{ RUNTIME('goToTab', {index: n - 1}); }}
map <Leader>1 :call switchTab(1)<CR>
map <Leader>2 :call switchTab(2)<CR>
map <Leader>3 :call switchTab(3)<CR>
map <Leader>4 :call switchTab(4)<CR>
map <Leader>5 :call switchTab(5)<CR>
map <Leader>6 :call switchTab(6)<CR>
map <Leader>7 :call switchTab(7)<CR>
map <Leader>8 :call switchTab(8)<CR>
map <Leader>9 :call switchTab(9)<CR>

" Explore open tabs/buffers
map <Leader>be :buffer<Space>

" Clear search highlighting and normal highlighting
map <Leader><Space> clearSearchHighlight

" }}}
" Insert mode {{{

" Exit insert mode with jj
" FIXME: https://github.com/1995eaton/chromium-vim/issues/178
" We also cannot "de-focus" the address bar:
" https://github.com/1995eaton/chromium-vim/issues/560
" imap jj <ESC>

" Focus on first input field fast (note that i gets into caret mode)
map I gi
" Go to the second input field (useful for skipping over search fields)
" FIXME: only some work: https://github.com/1995eaton/chromium-vim/issues/426
map gI 2gi

" Move left and write like in normal mode
imap <C-l> forwardChar
imap <C-h> backwardChar

" " Yank and  paste in insert mode with C-c and C-v
" imap -builtin <C-c> <C-v><C-c>
" imap -builtin <C-v> <S-Ins>

" }}}
" Command mode {{{

" Make ; work like : to enter command mode (; is used to enter extended hints)
map ; :

" }}}
" Convenient mappings {{{

" Copy the url of the current page to the clibboard
map y yankDocumentUrl

" Kill Chrome (save first the current session and then quit)
map <Leader>kv :qall<CR>
" Restart Chrome
map <Leader>rs :chrome://restart<CR>
" Restore previous session
" nmap -builtin  <Leader>ps :emenu History.Restore Previous Session<CR>
" History (and tab history)
map <Leader>hs :history<Space>
map <Leader>th :tabhistory<Space>
" Clear history
" nmap -builtin <Leader>ch :emenu History.Clear Recent Historyâ€¦<CR>

" Downloads
map <Leader>dl :chrome downloads<CR>

" Addons (i.e extensions)
map <Leader>ad :chrome extensions<CR>

" Search engines
map s :open google<Space>
map S :tabnew google<Space>
map <Leader>sw :open wikipedia<Space>
map <Leader>Sw :tabopen wikipedia<Space>
map <Leader>sy :open youtube<Space>
map <Leader>Sy :tabopen youtube<Space>
let searchengine stackoverflow = "http://stackoverflow.com/search?q="
map <Leader>ss :open stackoverflow<Space>
map <Leader>Ss :tabopen stackoverflow<Space>
let searchengine meli = "http://www.mercadolibre.com.ar/jm/search?as_word="
map <Leader>sm :open meli<Space>
map <Leader>Sm :tabopen meli<Space>

" }}}
